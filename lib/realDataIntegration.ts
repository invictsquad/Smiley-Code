import { FileTree } from '../types';

export interface DataSource {
  id: string;
  name: string;
  description: string;
  endpoint: string;
  type: 'json' | 'csv' | 'xml';
  sampleData: any;
}

export const popularDataSources: DataSource[] = [
  {
    id: 'jsonplaceholder-posts',
    name: 'Blog Posts',
    description: 'Sample blog posts with titles, content, and authors',
    endpoint: 'https://jsonplaceholder.typicode.com/posts',
    type: 'json',
    sampleData: [
      { id: 1, title: 'Sample Post', body: 'This is a sample blog post...', userId: 1 }
    ]
  },
  {
    id: 'jsonplaceholder-users',
    name: 'User Profiles',
    description: 'Sample user profiles with contact information',
    endpoint: 'https://jsonplaceholder.typicode.com/users',
    type: 'json',
    sampleData: [
      { id: 1, name: 'John Doe', email: 'john@example.com', phone: '123-456-7890' }
    ]
  },
  {
    id: 'jsonplaceholder-photos',
    name: 'Photo Gallery',
    description: 'Sample photos for galleries and portfolios',
    endpoint: 'https://jsonplaceholder.typicode.com/photos?_limit=20',
    type: 'json',
    sampleData: [
      { id: 1, title: 'Sample Photo', url: 'https://via.placeholder.com/600/92c952', thumbnailUrl: 'https://via.placeholder.com/150/92c952' }
    ]
  },
  {
    id: 'reqres-users',
    name: 'Team Members',
    description: 'Professional user profiles with avatars',
    endpoint: 'https://reqres.in/api/users',
    type: 'json',
    sampleData: [
      { id: 1, first_name: 'George', last_name: 'Bluth', email: 'george.bluth@reqres.in', avatar: 'https://reqres.in/img/faces/1-image.jpg' }
    ]
  },
  {
    id: 'cat-facts',
    name: 'Random Facts',
    description: 'Interesting random facts for content',
    endpoint: 'https://catfact.ninja/facts?limit=10',
    type: 'json',
    sampleData: [
      { fact: 'Cats have over 20 muscles that control their ears.', length: 52 }
    ]
  }
];

export class RealDataIntegrator {
  static injectDataFetching(fileTree: FileTree, dataSources: DataSource[]): FileTree {
    const updatedFileTree = { ...fileTree };
    
    // Create data service file
    const dataServiceCode = this.generateDataService(dataSources);
    updatedFileTree['scripts/data-service.js'] = dataServiceCode;
    
    // Update main.js to use data service
    if (updatedFileTree['scripts/main.js']) {
      updatedFileTree['scripts/main.js'] = this.updateMainScript(updatedFileTree['scripts/main.js']);
    }
    
    // Update HTML to include data service
    if (updatedFileTree['index.html']) {
      updatedFileTree['index.html'] = this.updateHtmlWithDataService(updatedFileTree['index.html']);
    }
    
    return updatedFileTree;
  }

  private static generateDataService(dataSources: DataSource[]): string {
    return `/**
 * Data Service - Handles fetching real data from various APIs
 * Generated by Smiley Code AI
 */

class DataService {
  constructor() {
    this.cache = new Map();
    this.cacheDuration = 5 * 60 * 1000; // 5 minutes
  }

  async fetchData(sourceId, options = {}) {
    const cacheKey = \`\${sourceId}-\${JSON.stringify(options)}\`;
    
    // Check cache first
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey);
      if (Date.now() - cached.timestamp < this.cacheDuration) {
        return cached.data;
      }
    }

    try {
      const source = this.getDataSource(sourceId);
      if (!source) {
        throw new Error(\`Data source '\${sourceId}' not found\`);
      }

      const response = await fetch(source.endpoint);
      if (!response.ok) {
        throw new Error(\`HTTP error! status: \${response.status}\`);
      }

      const data = await response.json();
      
      // Cache the result
      this.cache.set(cacheKey, {
        data: data,
        timestamp: Date.now()
      });

      return data;
    } catch (error) {
      console.warn(\`Failed to fetch data from \${sourceId}:\`, error);
      return this.getFallbackData(sourceId);
    }
  }

  getDataSource(sourceId) {
    const sources = ${JSON.stringify(dataSources, null, 2)};
    return sources.find(source => source.id === sourceId);
  }

  getFallbackData(sourceId) {
    const source = this.getDataSource(sourceId);
    return source ? source.sampleData : [];
  }

  // Utility methods for common data operations
  async getPosts() {
    return await this.fetchData('jsonplaceholder-posts');
  }

  async getUsers() {
    return await this.fetchData('jsonplaceholder-users');
  }

  async getPhotos(limit = 20) {
    return await this.fetchData('jsonplaceholder-photos');
  }

  async getTeamMembers() {
    const response = await this.fetchData('reqres-users');
    return response.data || response;
  }

  async getRandomFacts() {
    const response = await this.fetchData('cat-facts');
    return response.data || response;
  }
}

// Create global instance
window.dataService = new DataService();

// Export for module systems
if (typeof module !== 'undefined' && module.exports) {
  module.exports = DataService;
}`;
  }

  private static updateMainScript(mainScript: string): string {
    // Add data service initialization if not present
    if (!mainScript.includes('dataService')) {
      const initCode = `
// Initialize data service
document.addEventListener('DOMContentLoaded', async function() {
  if (window.dataService) {
    console.log('Data service ready');
    // Example: Load some data
    // const posts = await dataService.getPosts();
    // console.log('Loaded posts:', posts);
  }
});

`;
      return initCode + mainScript;
    }
    return mainScript;
  }

  private static updateHtmlWithDataService(html: string): string {
    // Add data service script before main.js
    if (html.includes('scripts/main.js') && !html.includes('scripts/data-service.js')) {
      return html.replace(
        '<script src="scripts/main.js"></script>',
        '<script src="scripts/data-service.js"></script>\n    <script src="scripts/main.js"></script>'
      );
    }
    return html;
  }
}